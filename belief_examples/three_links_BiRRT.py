import trajoptpy
import trajoptpy.make_kinbodies as mk
from openravepy import *
from numpy import *
import time

env = Environment()
env.Load('../data/three_links_BiRRT.xml')
env.SetViewer('qtcoin')
robot = env.GetRobots()[0]

ikmodel=databases.inversekinematics.InverseKinematicsModel(robot,iktype=IkParameterization.Type.TranslationXY2D)
if not ikmodel.load():
    ikmodel.autogenerate()

print('IK model autogenerated!')

#mk.create_mesh_box(env, array([0.2,0.25,0]), array([0.05,0.05,0.3]), "box1")

target=([0.3,0.2])
print(target)

robot.SetActiveDOFs(robot.SetActiveManipulator('arm').GetArmIndices()) 

h=env.plot3(array([target[0],target[1],ikmodel.manip.GetTransform()[2,3]]),10.0)

ikp=IkParameterization(target,IkParameterization.Type.TranslationXY2D) 
manip=interfaces.BaseManipulation(robot)

traj = manip.MoveToHandPosition(ikparam=ikp,seedik=10,execute=False,outputtrajobj=True)
print(traj)

for i in range(traj.GetNumWaypoints()):
    # get the waypoint values, this holds velocites, time stamps, etc
    data=traj.GetWaypoint(i)
    # extract the robot joint values only
    dofvalues=traj.GetConfigurationSpecification().ExtractJointValues(data,robot,robot.GetActiveDOFIndices())
    raveLogInfo('waypoint %d is %s'%(i,dofvalues))
    robot.SetDOFValues(dofvalues)

print(robot.GetActiveManipulator().GetEndEffectorTransform())

#robot.GetController().SetPath(traj)

raw_input('Hit ENTER to continue.')
env.Destroy()

